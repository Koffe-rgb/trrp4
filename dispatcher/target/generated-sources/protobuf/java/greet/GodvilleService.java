// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: godville.proto

package greet;

/**
 * Protobuf service {@code greet.GodvilleService}
 */
public  abstract class GodvilleService
    implements com.google.protobuf.Service {
  protected GodvilleService() {}

  public interface Interface {
    /**
     * <code>rpc Login(.greet.LoginData) returns (.greet.UserLoginOuput);</code>
     */
    public abstract void login(
        com.google.protobuf.RpcController controller,
        greet.LoginData request,
        com.google.protobuf.RpcCallback<greet.UserLoginOuput> done);

    /**
     * <code>rpc Register(.greet.RegisterData) returns (.greet.UserRegOutput);</code>
     */
    public abstract void register(
        com.google.protobuf.RpcController controller,
        greet.RegisterData request,
        com.google.protobuf.RpcCallback<greet.UserRegOutput> done);

    /**
     * <code>rpc Logout(.greet.ClientId) returns (.greet.Empty);</code>
     */
    public abstract void logout(
        com.google.protobuf.RpcController controller,
        greet.ClientId request,
        com.google.protobuf.RpcCallback<greet.Empty> done);

    /**
     * <code>rpc StartDuel(.greet.ClientId) returns (.greet.ServerIp);</code>
     */
    public abstract void startDuel(
        com.google.protobuf.RpcController controller,
        greet.ClientId request,
        com.google.protobuf.RpcCallback<greet.ServerIp> done);

    /**
     * <code>rpc GetStatistic(.greet.ClientId) returns (.greet.Statistic);</code>
     */
    public abstract void getStatistic(
        com.google.protobuf.RpcController controller,
        greet.ClientId request,
        com.google.protobuf.RpcCallback<greet.Statistic> done);

    /**
     * <code>rpc Check(.greet.Empty) returns (.greet.Empty);</code>
     */
    public abstract void check(
        com.google.protobuf.RpcController controller,
        greet.Empty request,
        com.google.protobuf.RpcCallback<greet.Empty> done);

  }

  public static com.google.protobuf.Service newReflectiveService(
      final Interface impl) {
    return new GodvilleService() {
      @java.lang.Override
      public  void login(
          com.google.protobuf.RpcController controller,
          greet.LoginData request,
          com.google.protobuf.RpcCallback<greet.UserLoginOuput> done) {
        impl.login(controller, request, done);
      }

      @java.lang.Override
      public  void register(
          com.google.protobuf.RpcController controller,
          greet.RegisterData request,
          com.google.protobuf.RpcCallback<greet.UserRegOutput> done) {
        impl.register(controller, request, done);
      }

      @java.lang.Override
      public  void logout(
          com.google.protobuf.RpcController controller,
          greet.ClientId request,
          com.google.protobuf.RpcCallback<greet.Empty> done) {
        impl.logout(controller, request, done);
      }

      @java.lang.Override
      public  void startDuel(
          com.google.protobuf.RpcController controller,
          greet.ClientId request,
          com.google.protobuf.RpcCallback<greet.ServerIp> done) {
        impl.startDuel(controller, request, done);
      }

      @java.lang.Override
      public  void getStatistic(
          com.google.protobuf.RpcController controller,
          greet.ClientId request,
          com.google.protobuf.RpcCallback<greet.Statistic> done) {
        impl.getStatistic(controller, request, done);
      }

      @java.lang.Override
      public  void check(
          com.google.protobuf.RpcController controller,
          greet.Empty request,
          com.google.protobuf.RpcCallback<greet.Empty> done) {
        impl.check(controller, request, done);
      }

    };
  }

  public static com.google.protobuf.BlockingService
      newReflectiveBlockingService(final BlockingInterface impl) {
    return new com.google.protobuf.BlockingService() {
      public final com.google.protobuf.Descriptors.ServiceDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }

      public final com.google.protobuf.Message callBlockingMethod(
          com.google.protobuf.Descriptors.MethodDescriptor method,
          com.google.protobuf.RpcController controller,
          com.google.protobuf.Message request)
          throws com.google.protobuf.ServiceException {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.callBlockingMethod() given method descriptor for " +
            "wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return impl.login(controller, (greet.LoginData)request);
          case 1:
            return impl.register(controller, (greet.RegisterData)request);
          case 2:
            return impl.logout(controller, (greet.ClientId)request);
          case 3:
            return impl.startDuel(controller, (greet.ClientId)request);
          case 4:
            return impl.getStatistic(controller, (greet.ClientId)request);
          case 5:
            return impl.check(controller, (greet.Empty)request);
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getRequestPrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getRequestPrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return greet.LoginData.getDefaultInstance();
          case 1:
            return greet.RegisterData.getDefaultInstance();
          case 2:
            return greet.ClientId.getDefaultInstance();
          case 3:
            return greet.ClientId.getDefaultInstance();
          case 4:
            return greet.ClientId.getDefaultInstance();
          case 5:
            return greet.Empty.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getResponsePrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getResponsePrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return greet.UserLoginOuput.getDefaultInstance();
          case 1:
            return greet.UserRegOutput.getDefaultInstance();
          case 2:
            return greet.Empty.getDefaultInstance();
          case 3:
            return greet.ServerIp.getDefaultInstance();
          case 4:
            return greet.Statistic.getDefaultInstance();
          case 5:
            return greet.Empty.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

    };
  }

  /**
   * <code>rpc Login(.greet.LoginData) returns (.greet.UserLoginOuput);</code>
   */
  public abstract void login(
      com.google.protobuf.RpcController controller,
      greet.LoginData request,
      com.google.protobuf.RpcCallback<greet.UserLoginOuput> done);

  /**
   * <code>rpc Register(.greet.RegisterData) returns (.greet.UserRegOutput);</code>
   */
  public abstract void register(
      com.google.protobuf.RpcController controller,
      greet.RegisterData request,
      com.google.protobuf.RpcCallback<greet.UserRegOutput> done);

  /**
   * <code>rpc Logout(.greet.ClientId) returns (.greet.Empty);</code>
   */
  public abstract void logout(
      com.google.protobuf.RpcController controller,
      greet.ClientId request,
      com.google.protobuf.RpcCallback<greet.Empty> done);

  /**
   * <code>rpc StartDuel(.greet.ClientId) returns (.greet.ServerIp);</code>
   */
  public abstract void startDuel(
      com.google.protobuf.RpcController controller,
      greet.ClientId request,
      com.google.protobuf.RpcCallback<greet.ServerIp> done);

  /**
   * <code>rpc GetStatistic(.greet.ClientId) returns (.greet.Statistic);</code>
   */
  public abstract void getStatistic(
      com.google.protobuf.RpcController controller,
      greet.ClientId request,
      com.google.protobuf.RpcCallback<greet.Statistic> done);

  /**
   * <code>rpc Check(.greet.Empty) returns (.greet.Empty);</code>
   */
  public abstract void check(
      com.google.protobuf.RpcController controller,
      greet.Empty request,
      com.google.protobuf.RpcCallback<greet.Empty> done);

  public static final
      com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptor() {
    return greet.Godville.getDescriptor().getServices().get(0);
  }
  public final com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }

  public final void callMethod(
      com.google.protobuf.Descriptors.MethodDescriptor method,
      com.google.protobuf.RpcController controller,
      com.google.protobuf.Message request,
      com.google.protobuf.RpcCallback<
        com.google.protobuf.Message> done) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.callMethod() given method descriptor for wrong " +
        "service type.");
    }
    switch(method.getIndex()) {
      case 0:
        this.login(controller, (greet.LoginData)request,
          com.google.protobuf.RpcUtil.<greet.UserLoginOuput>specializeCallback(
            done));
        return;
      case 1:
        this.register(controller, (greet.RegisterData)request,
          com.google.protobuf.RpcUtil.<greet.UserRegOutput>specializeCallback(
            done));
        return;
      case 2:
        this.logout(controller, (greet.ClientId)request,
          com.google.protobuf.RpcUtil.<greet.Empty>specializeCallback(
            done));
        return;
      case 3:
        this.startDuel(controller, (greet.ClientId)request,
          com.google.protobuf.RpcUtil.<greet.ServerIp>specializeCallback(
            done));
        return;
      case 4:
        this.getStatistic(controller, (greet.ClientId)request,
          com.google.protobuf.RpcUtil.<greet.Statistic>specializeCallback(
            done));
        return;
      case 5:
        this.check(controller, (greet.Empty)request,
          com.google.protobuf.RpcUtil.<greet.Empty>specializeCallback(
            done));
        return;
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getRequestPrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getRequestPrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return greet.LoginData.getDefaultInstance();
      case 1:
        return greet.RegisterData.getDefaultInstance();
      case 2:
        return greet.ClientId.getDefaultInstance();
      case 3:
        return greet.ClientId.getDefaultInstance();
      case 4:
        return greet.ClientId.getDefaultInstance();
      case 5:
        return greet.Empty.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getResponsePrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getResponsePrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return greet.UserLoginOuput.getDefaultInstance();
      case 1:
        return greet.UserRegOutput.getDefaultInstance();
      case 2:
        return greet.Empty.getDefaultInstance();
      case 3:
        return greet.ServerIp.getDefaultInstance();
      case 4:
        return greet.Statistic.getDefaultInstance();
      case 5:
        return greet.Empty.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public static Stub newStub(
      com.google.protobuf.RpcChannel channel) {
    return new Stub(channel);
  }

  public static final class Stub extends greet.GodvilleService implements Interface {
    private Stub(com.google.protobuf.RpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.RpcChannel channel;

    public com.google.protobuf.RpcChannel getChannel() {
      return channel;
    }

    public  void login(
        com.google.protobuf.RpcController controller,
        greet.LoginData request,
        com.google.protobuf.RpcCallback<greet.UserLoginOuput> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        greet.UserLoginOuput.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          greet.UserLoginOuput.class,
          greet.UserLoginOuput.getDefaultInstance()));
    }

    public  void register(
        com.google.protobuf.RpcController controller,
        greet.RegisterData request,
        com.google.protobuf.RpcCallback<greet.UserRegOutput> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        greet.UserRegOutput.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          greet.UserRegOutput.class,
          greet.UserRegOutput.getDefaultInstance()));
    }

    public  void logout(
        com.google.protobuf.RpcController controller,
        greet.ClientId request,
        com.google.protobuf.RpcCallback<greet.Empty> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        greet.Empty.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          greet.Empty.class,
          greet.Empty.getDefaultInstance()));
    }

    public  void startDuel(
        com.google.protobuf.RpcController controller,
        greet.ClientId request,
        com.google.protobuf.RpcCallback<greet.ServerIp> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(3),
        controller,
        request,
        greet.ServerIp.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          greet.ServerIp.class,
          greet.ServerIp.getDefaultInstance()));
    }

    public  void getStatistic(
        com.google.protobuf.RpcController controller,
        greet.ClientId request,
        com.google.protobuf.RpcCallback<greet.Statistic> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(4),
        controller,
        request,
        greet.Statistic.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          greet.Statistic.class,
          greet.Statistic.getDefaultInstance()));
    }

    public  void check(
        com.google.protobuf.RpcController controller,
        greet.Empty request,
        com.google.protobuf.RpcCallback<greet.Empty> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(5),
        controller,
        request,
        greet.Empty.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          greet.Empty.class,
          greet.Empty.getDefaultInstance()));
    }
  }

  public static BlockingInterface newBlockingStub(
      com.google.protobuf.BlockingRpcChannel channel) {
    return new BlockingStub(channel);
  }

  public interface BlockingInterface {
    public greet.UserLoginOuput login(
        com.google.protobuf.RpcController controller,
        greet.LoginData request)
        throws com.google.protobuf.ServiceException;

    public greet.UserRegOutput register(
        com.google.protobuf.RpcController controller,
        greet.RegisterData request)
        throws com.google.protobuf.ServiceException;

    public greet.Empty logout(
        com.google.protobuf.RpcController controller,
        greet.ClientId request)
        throws com.google.protobuf.ServiceException;

    public greet.ServerIp startDuel(
        com.google.protobuf.RpcController controller,
        greet.ClientId request)
        throws com.google.protobuf.ServiceException;

    public greet.Statistic getStatistic(
        com.google.protobuf.RpcController controller,
        greet.ClientId request)
        throws com.google.protobuf.ServiceException;

    public greet.Empty check(
        com.google.protobuf.RpcController controller,
        greet.Empty request)
        throws com.google.protobuf.ServiceException;
  }

  private static final class BlockingStub implements BlockingInterface {
    private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.BlockingRpcChannel channel;

    public greet.UserLoginOuput login(
        com.google.protobuf.RpcController controller,
        greet.LoginData request)
        throws com.google.protobuf.ServiceException {
      return (greet.UserLoginOuput) channel.callBlockingMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        greet.UserLoginOuput.getDefaultInstance());
    }


    public greet.UserRegOutput register(
        com.google.protobuf.RpcController controller,
        greet.RegisterData request)
        throws com.google.protobuf.ServiceException {
      return (greet.UserRegOutput) channel.callBlockingMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        greet.UserRegOutput.getDefaultInstance());
    }


    public greet.Empty logout(
        com.google.protobuf.RpcController controller,
        greet.ClientId request)
        throws com.google.protobuf.ServiceException {
      return (greet.Empty) channel.callBlockingMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        greet.Empty.getDefaultInstance());
    }


    public greet.ServerIp startDuel(
        com.google.protobuf.RpcController controller,
        greet.ClientId request)
        throws com.google.protobuf.ServiceException {
      return (greet.ServerIp) channel.callBlockingMethod(
        getDescriptor().getMethods().get(3),
        controller,
        request,
        greet.ServerIp.getDefaultInstance());
    }


    public greet.Statistic getStatistic(
        com.google.protobuf.RpcController controller,
        greet.ClientId request)
        throws com.google.protobuf.ServiceException {
      return (greet.Statistic) channel.callBlockingMethod(
        getDescriptor().getMethods().get(4),
        controller,
        request,
        greet.Statistic.getDefaultInstance());
    }


    public greet.Empty check(
        com.google.protobuf.RpcController controller,
        greet.Empty request)
        throws com.google.protobuf.ServiceException {
      return (greet.Empty) channel.callBlockingMethod(
        getDescriptor().getMethods().get(5),
        controller,
        request,
        greet.Empty.getDefaultInstance());
    }

  }

  // @@protoc_insertion_point(class_scope:greet.GodvilleService)
}

